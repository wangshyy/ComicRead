package com.comicread.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comicread.android.data.ComicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMIC_BEAN".
*/
public class ComicBeanDao extends AbstractDao<ComicBean, Void> {

    public static final String TABLENAME = "COMIC_BEAN";

    /**
     * Properties of entity ComicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cover = new Property(0, String.class, "cover", false, "COVER");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ComicId = new Property(2, String.class, "comicId", false, "COMIC_ID");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property Tags = new Property(5, String.class, "tags", false, "TAGS");
    }


    public ComicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ComicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMIC_BEAN\" (" + //
                "\"COVER\" TEXT," + // 0: cover
                "\"NAME\" TEXT," + // 1: name
                "\"COMIC_ID\" TEXT," + // 2: comicId
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"AUTHOR\" TEXT," + // 4: author
                "\"TAGS\" TEXT);"); // 5: tags
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ComicBean entity) {
        stmt.clearBindings();
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(1, cover);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String comicId = entity.getComicId();
        if (comicId != null) {
            stmt.bindString(3, comicId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(6, tags);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ComicBean entity) {
        stmt.clearBindings();
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(1, cover);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String comicId = entity.getComicId();
        if (comicId != null) {
            stmt.bindString(3, comicId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(6, tags);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ComicBean readEntity(Cursor cursor, int offset) {
        ComicBean entity = new ComicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cover
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comicId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // tags
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ComicBean entity, int offset) {
        entity.setCover(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComicId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTags(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ComicBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ComicBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ComicBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
